%ATLAS DH Parameters
clear all
close all
clc
syms q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 q16 q17 q18 q19 q20
syms t1(t) t2(t) t3(t) t4(t) t5(t) t6(t) t7(t) t8(t) t9(t) t10(t)
syms t11(t) t12(t) t13(t) t14(t) t15(t) t16(t) t17(t) t18(t) t19(t) t20(t)

jointAngles = [q1,q2,q3,q4,q5,q6,q7,q8,q9,q10,q11,q12,q13,q14,q15,q16,q17,q18,q19,q20];

%%StandingPose
%jointAngles = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];

%%Kneeling Pose
%jointAngles = [0,-90,90,0,0,0,0,0,0,90,-90,0,0,0,0,0,-90,0,90,0];


% Setting up values for DH parameters for references
d1 = .422;
d2 = sqrt(.05^2+.374^2);
tq2 = atan(.05/.374);
d3 = 0.0225;
d4 = sqrt(.066^2+.05^2);
tq4 = tq2+pi/2-atan(.066/.05);
tq3 = pi/2-atan(0.066/.05);
d5 = 0.089;
d6 = 0.05;
d7 = sqrt(.066^2+.0225^2);
tq6 = pi/2-atan(.0225/0.066);
d8 = d2;
tq8 = tq2;

%input joint angles
%JointAngle = [q1,q2,q3,q4,q5,q6,q7,q8,q9,q10,q11,q12,q13];
jointAngle = jointAngles(1:13);%[0,0,0,0,0,0,0,0,0,0,0,0,0];

%DH parameters for legs
d = [0,0,0,-d3,0,0,0,0,0,d6,0,0,0,0,0];
theta = [q1,q2,q3+tq2,q4-tq4,tq3,q5-pi/2,q6,q7,q8,q9+tq6,pi/2-tq6,q10+tq8,q11-tq8,q12,q13];
a = [0,d1,d2,d4,0,0,-d5,-d5,0,-d7,0,-d8,d1,0,0];
alpha = [pi/2,0,0,0,-pi/2,-pi/2,0,0,pi/2,0,pi/2,0,0,-pi/2,0];

%DH Table
DHpars = [d',theta',a',alpha'];

%Define a constant identity matrix needed for the for loop
Tbase_to_frame_prev = [1,0,0,0;0,1,0,0;0,0,1,0;0,0,0,1];
%For loop to construct each transformation matrix from sequential frames,
%as well as the overall transform from base to tip
for i = 1:length(d)
    Trans{i} = DHparamsSymbolic(DHpars(i,:));           %Generate transform from DHparams
    Tbase_to_frame{i} = Tbase_to_frame_prev*Trans{i};  %base to current frame transform
    Tbase_to_frame_prev = Tbase_to_frame{i};
    jointPoint(:,i) = Tbase_to_frame{i}*[0;0;0;1];
end

%Transforms from toe to toe, toe to pelvis, and toe to knee
TLtoe2Rtoe = Tbase_to_frame{length(d)};
TLtoe2Pelvis = Tbase_to_frame{7};
TLtoe2Rknee = Tbase_to_frame{12};


%% Intermediate Transformation matrix at Pelvis


iRz = [cosd(90) -sind(90) 0 0; sind(90) cosd(90) 0 0; 0 0 1 0; 0 0 0 1] ;
iTz = [1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1] ;
iTx = [1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1] ; 
iRx = [1 0 0 0; 0 cosd(0) -sind(0) 0; 0 sind(0) cosd(0) 0;0 0 0 1];

InterTrans = iRz*iTz*iTx*iRx;

%% DH parameters for Right Arm
% q1 = jointAngles(14);
% q2 = jointAngles(15);
% q3 = jointAngles(16);
% q4 = jointAngles(17);
% q5 = jointAngles(18);

%links = ['pelvis';'ltorso';'mtorso';'r_clav';'r_scap';'arm'];

%masses = [9.609;2.27;.799;4.46;3.899;12.75];

d =     [.162,0,.1406,0,-.245,0];
theta = [q14,pi/2+q15,q16,pi/2,q17,q18];
a =     [-.0125,0,-.5276,-.2256,-.11,-.605762];
alpha = [-pi/2,pi/2,0,-pi/2,pi/2,0];

    numberOfJoints = length(d);
    
    % Create a matrix to store T0(X) base frame transforms
    T0X = cell(1,numberOfJoints);
    
    % Create a matrix to store T(X)(X+1) frame transforms
    TXX = cell(1,numberOfJoints);
    
    % Create a matrix to store p end effector vectors
    %P = zeros(4,numberOfJoints);
    
    % Create matrices for 3D plot
    %xR = zeros(1, numberOfJoints+1);
    %yR = zeros(1, numberOfJoints+1);
    %zR = zeros(1, numberOfJoints+1);

    for i = 1:numberOfJoints

        Rz = [cos(theta(1,i)) -sin(theta(1,i)) 0 0; sin(theta(1,i)) cos(theta(1,i)) 0 0; 0 0 1 0; 0 0 0 1] ;
        Tz = [1 0 0 0; 0 1 0 0; 0 0 1 d(1,i); 0 0 0 1] ;
        Tx = [1 0 0 a(i); 0 1 0 0; 0 0 1 0; 0 0 0 1] ; 
        Rx = [1 0 0 0; 0 cos(alpha(1,i)) -sin(alpha(1,i)) 0; 0 sin(alpha(1,i)) cos(alpha(1,i)) 0;0 0 0 1];

        p0 = [0; 0; 0; 1];

        TXX{i} = Rz*Tz*Tx*Rx;

        if(i==1)
            T0X{i} = TXX{i};
        elseif (i>1)
            T0X{i} = T0X{i-1}*TXX{i};
        end
        
        P(:,i) = T0X{i}*p0;
 
        p = P(:,i);
        xR(1,i+1) = p(1);
        yR(1,i+1) = p(2);
        zR(1,i+1) = p(3);

    end


TLToe2RShoulder = TLtoe2Pelvis*InterTrans*T0X{6}; 


%% DH parameters for Left Arm
% q1 = jointAngles(14);
% q2 = jointAngles(15);
% q3 = jointAngles(16);
% q4 = jointAngles(19);
% q5 = jointAngles(20);

%links = ['pelvis';'ltorso';'mtorso';'r_clav';'r_scap';'arm'];

%masses = [9.609;2.27;.799;4.46;3.899;12.75];

d =     [.162,0,.1406,0,-.245,0];
theta = [q14,pi/2+q15,q16,pi/2,q19,q20+pi];
a =     [-.0125,0,-.5276,.2256,.11,-.605762];
alpha = [-pi/2,pi/2,0,-pi/2,pi/2,0];

    numberOfJoints = length(d);
    
    % Create a matrix to store T0(X) base frame transforms
    T0LX = cell(1,numberOfJoints);
    
    % Create a matrix to store T(X)(X+1) frame transforms
    TXLX = cell(1,numberOfJoints);
    
    % Create a matrix to store p end effector vectors
    %P = zeros(4,numberOfJoints);
    clear P
    
    % Create matrices for 3D plot
    %xL = zeros(1, numberOfJoints+1);
    %yL = zeros(1, numberOfJoints+1);
    %zL = zeros(1, numberOfJoints+1);

    for i = 1:numberOfJoints

        Rz = [cos(theta(1,i)) -sin(theta(1,i)) 0 0; sin(theta(1,i)) cos(theta(1,i)) 0 0; 0 0 1 0; 0 0 0 1] ;
        Tz = [1 0 0 0; 0 1 0 0; 0 0 1 d(1,i); 0 0 0 1] ;
        Tx = [1 0 0 a(i); 0 1 0 0; 0 0 1 0; 0 0 0 1] ; 
        Rx = [1 0 0 0; 0 cos(alpha(1,i)) -sin(alpha(1,i)) 0; 0 sin(alpha(1,i)) cos(alpha(1,i)) 0;0 0 0 1];

        p0 = [0; 0; 0; 1];

        TXLX{i} = Rz*Tz*Tx*Rx;

        if(i==1)
            T0LX{i} = TXLX{i};
        elseif (i>1)
            T0LX{i} = T0LX{i-1}*TXLX{i};
        end
        
        P(:,i) = T0LX{1,i}*p0;
 
        p = P(:,i);
        xL(1,i+1) = p(1);
        yL(1,i+1) = p(2);
        zL(1,i+1) = p(3);

    end


TLToe2LShoulder = TLtoe2Pelvis*InterTrans*T0LX{6}; 



%% Velocity Kinematics for the points on the ATLAS robot we care about

% Define the forward velocity kinematics
%take the symbolic derivative with respect to time, with q1 - q20
%being the time functions for joint angles

% Left toe to right toe.
%TLtoe2Rtoe
xRtoe = TLtoe2Rtoe(1:3,4);
x_Rtoe = subs(xRtoe,{q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13...
    q14 q15 q16 q17 q18 q19 q20},{t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12...
    t13 t14 t15 t16 t17 t18 t19 t20});
xRtoe_velocity = diff(x_Rtoe,t);
disp('Velocity kinematics of the right toe')
disp(xRtoe_velocity)

% Left toe to right knee.
%TLtoe2Rknee
xRknee = TLtoe2Rknee(1:3,4);
x_Rknee = subs(xRknee,{q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13...
    q14 q15 q16 q17 q18 q19 q20},{t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12...
    t13 t14 t15 t16 t17 t18 t19 t20});
xRknee_velocity = diff(x_Rknee,t);
disp('Velocity kinematics of the right knee')
disp(xRknee_velocity)

% Left toe to pelvis.
%TLtoe2Pelvis
xPelvis = TLtoe2Pelvis(1:3,4);
x_Pelvis = subs(xPelvis,{q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13...
    q14 q15 q16 q17 q18 q19 q20},{t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12...
    t13 t14 t15 t16 t17 t18 t19 t20});
xPelvis_velocity = diff(x_Pelvis,t);
disp('Velocity kinematics of the pelvis')
disp(xPelvis_velocity)

% Pelvis to left arm.
%TLToe2RShoulder
xLarm = TLToe2RShoulder(1:3,4);
x_Larm = subs(xLarm,{q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13...
    q14 q15 q16 q17 q18 q19 q20},{t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12...
    t13 t14 t15 t16 t17 t18 t19 t20});
xLarm_velocity = diff(x_Larm,t);
disp('Velocity kinematics of the left arm')
disp(xLarm_velocity)

% Pelvis to right arm.
%TLToe2LShoulder
xRarm = TLToe2LShoulder(1:3,4);
x_Rarm = subs(xRarm,{q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13...
    q14 q15 q16 q17 q18 q19 q20},{t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12...
    t13 t14 t15 t16 t17 t18 t19 t20});
xRarm_velocity = diff(x_Rarm,t);
disp('Velocity kinematics of the right arm')
disp(xRarm_velocity)

%% Combine DH Positions For Ploting
% Reorient the positions to have the pelvis at 0,0,0 for drawing purposes
% Z = jointPoint(1,:)-.862; X = jointPoint(3,:); Y = -jointPoint(2,:)+.1115;
% Ps = [X',Y',Z'];
% last = 15;
% figure()
% scatter3(X(1:last),Y(1:last),Z(1:last))
% hold on
% plot3(X(1:last),Y(1:last),Z(1:last))
% plot3(xR'+ X(7),yR'+ Y(7),zR'+ Z(7),'-o');
% plot3(xL'+ X(7),yL'+ Y(7),zL'+ Z(7),'-o');
% axis([-1,1,-1,1,-1,1])
% xlabel('X'); ylabel('Y'); zlabel('Z');

